#include <iostream>
#include <unordered_map>
using namespace std;

class LRUCache {
private:
    struct Node {
        int key, value;
        Node* prev;
        Node* next;
        Node(int k, int v) : key(k), value(v), prev(nullptr), next(nullptr) {}
    };

    int capacity;
    unordered_map<int, Node*> cacheMap;
    Node* head;
    Node* tail;

    void insertAtFront(Node* node) {
        node->next = head->next;
        node->prev = head;
        head->next->prev = node;
        head->next = node;
    }

    void removeNode(Node* node) {
        Node* before = node->prev;
        Node* after = node->next;
        before->next = after;
        after->prev = before;
    }

    void moveToFront(Node* node) {
        removeNode(node);
        insertAtFront(node);
    }

public:
    LRUCache(int cap) {
        capacity = cap;
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head->next = tail;
        tail->prev = head;
    }

    int get(int key) {
        if (cacheMap.find(key) == cacheMap.end())
            return -1;

        Node* node = cacheMap[key];
        moveToFront(node);
        return node->value;
    }

    void put(int key, int value) {
        if (cacheMap.find(key) != cacheMap.end()) {
            Node* node = cacheMap[key];
            node->value = value;
            moveToFront(node);
        } else {
            if (cacheMap.size() == capacity) {
                Node* lru = tail->prev;
                cacheMap.erase(lru->key);
                removeNode(lru);
                delete lru;
            }

            Node* newNode = new Node(key, value);
            cacheMap[key] = newNode;
            insertAtFront(newNode);
        }
    }

    ~LRUCache() {
        Node* curr = head;
        while (curr != nullptr) {
            Node* next = curr->next;
            delete curr;
            curr = next;
        }
    }
};

int main() {
    LRUCache lru(2);

    lru.put(1, 1);        
    lru.put(2, 2);       
    cout << lru.get(1) << endl;

    lru.put(3, 3);  
    cout << lru.get(2) << endl;

    lru.put(4, 4);         
    cout << lru.get(1) << endl; 
    cout << lru.get(3) << endl; 
    cout << lru.get(4) << endl; 

    return 0;
}
